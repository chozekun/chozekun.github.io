<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: effective c++ | chozekun's blog]]></title>
  <link href="http://chozekun.github.io/blog/categories/effective-c-plus-plus/atom.xml" rel="self"/>
  <link href="http://chozekun.github.io/"/>
  <updated>2016-04-25T20:28:02+09:00</updated>
  <id>http://chozekun.github.io/</id>
  <author>
    <name><![CDATA[chozekun]]></name>
    <email><![CDATA[chozekun@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Effective C++] Item 7. 다형성을 가진 기본 클래스에서는 소멸자를 반드시 가상 소멸자로 선언하자]]></title>
    <link href="http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-7/"/>
    <updated>2016-04-25T13:17:34+09:00</updated>
    <id>http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-7</id>
    <content type="html"><![CDATA[<p>다음과 같은 다형성을 가진 클래스를 가정하자.</p>

<pre><code class="cpp">class TimeKeeper {
public:
    TimeKeeper();
    ~TimeKeeper();
    ...
};

class AtomicClock: public TimeKeeper { ... };
class WaterClock: public TimeKeeper { ... };
class WristWatch: public TimeKeeper { ... };
</code></pre>

<p>사용자는 이 클래스를 이용하여 시간 계산을 하고 싶을 것이다. 그러나 이 시계가 어떤 시계인지에 대한 관심은 없다. 그렇다면 다음과 같이 팩토리 함수를 만들어 두고 사용하면 좋을 것이다.</p>

<pre><code class="cpp">TimeKeeper* getTimeKeeper(); // TimeKeeper의 파생 클래스로부터 생성되는 객체의 포인터를 반환
</code></pre>

<pre><code class="cpp">TimeKeeper *ptk = getTimeKeeper();
...
delete ptk;
</code></pre>

<pre><code class="cpp">class TimeKeeper {
public:
    TimeKeeper();
    virtual ~TimeKeeper();
    ...
};

TimeKeeper *ptk = getTimeKeeper();
...
delete ptk;
</code></pre>

<pre><code class="cpp">class Point {
public:
    Point(int xCoord, int yCoord);
    ~Point();

private:
    int x, y;
};
</code></pre>

<pre><code class="cpp">class SpecialString: public std::string {
    ...
};
</code></pre>

<pre><code class="cpp">SpecialString *pss = new SpecialString("Impending Doom");
std::string *ps;
...
ps = pss;
...
delete ps;
</code></pre>

<pre><code class="cpp">class AWOV {
public:
    virtual ~AWOV() = 0;
};
</code></pre>

<pre><code class="cpp">AWOV::~AWOV() { }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Effective C++] Item 6. 컴파일러가 만들어낸 함수가 필요 없으면 확실히 이들의 사용을 금해 버리자]]></title>
    <link href="http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-6/"/>
    <updated>2016-04-25T13:17:32+09:00</updated>
    <id>http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-6</id>
    <content type="html"><![CDATA[<h3>객체 복사 막기</h3>

<p>부동산과 관련된 다음과 같은 클래스가 있다고 가정해보자.</p>

<pre><code class="cpp">class HomeForSale { ... };
</code></pre>

<p>모든 자산은 세상에 하나 밖에 없기 때문에 위 클래스로 만들어지는 객체는 복사가 불가능하게 해야한다.</p>

<pre><code class="cpp">HomeForSale home1;
HomeForSale home2;

HomeForSale home3(home1); // home1을 복사하려 한다.

home1 = home2; // home2를 복사하려 한다.
</code></pre>

<p>일반적으로 어떠한 기능을 막고 싶다면, 그런 기능을 지원하는 함수를 선언하지 않으면 된다. 그러나 <strong>복사 생성자와 복사 대입 연산자는 컴파일러가 자동으로 만들어 내기 때문에</strong>(항목 5 참조) 이런 방법이 통하지 않는다.</p>

<p>그렇다면 어떻게 해야 할까? 바로 컴파일러가 자동 생성하는 함수는 <code>public</code>이 되기 때문에 <code>private</code>으로 미리 만들어 버리면 된다. 일단 이들을 만들어 두기만 한다면, 컴파일러는 절대로 자동 생성을 하지 않는다.</p>

<p>여기까지만 하면 될까? 아니다. 약간 부족하다. <strong><code>private</code> 멤버 함수는 그 클래스의 멤버 함수와 <code>friend</code> 함수가 호출할 수 있다</strong>는 사실이 떡하니 버티고 있다. 이것까지 막으려면 어떻게 하는 것이 좋을까? 바로 <strong>&lsquo;정의'를 일부로 하지 않으면 된다</strong>. 어쩌다 실수로 복사 생성자나 복사 대입 연산자를 호출했다면, 링크 시점에 '정의되지 않은 함수'라는 에러를 보게 될테니 말이다. 이 꼼수는 하나의 기법으로 굳어져 표준 라이브러리인 <code>iostream</code>의 <code>ios_base</code>, <code>basic_ios</code>등에서도 쓰이고 있다고 한다.</p>

<p>자, 그럼 복사가 불가능한 버전의 <code>HomeForSale</code>을 보자.</p>

<pre><code class="cpp">class HomeForSale {
public:
    ...
private:
    HomeForSale(const HomeForSale&amp;); // 선언만 달랑 있다.
    HomeForSale&amp; operator=(const HomeForSale&amp;); // 마찬가지
};
</code></pre>

<p>매개 변수 이름이 빠져 있지만, 이는 필수 사항이 아니며, 매개 변수 이름을 선언한다해도 사용할 일이 없으니 뺐다.</p>

<p>이제 사용자가 <code>HomeForSale</code> 객체를 복사하려 한다면 컴파일 시점 에러를 보게 될것이고, 여러분이 깜빡하고 <code>HomeForSale</code>의 멤버 함수 혹은 <code>friend</code> 함수 안에서 객체를 복사하려 한다면 링크 시점 에러를 보게 될 것이다.</p>

<h3>링크 시점 에러를 컴파일 시점 에러로 바꾸기</h3>

<p>추가로 링크 시점 에러를 컴파일 시점 에러로 옮길 수도 있다. 에러는 나중에 발견되는 것보다 미리 발견되는 것이 더 좋기 때문에 이 방법을 추천한다. 바로 <strong>복사 불가 속성을 가지는 기반 클래스로부터 상속을 받는 방법</strong>이다.</p>

<pre><code class="cpp">class Uncopyable {
protected: // 파생된 클래스에 대해
    Uncopyable() { } // 생성과
    ~Uncopyable() { } // 소멸을 허용
private:
    Uncopyable(const Uncopyable&amp;); // 하지만 복사는 방지
    Uncopyable&amp; operator=(const Uncopyable&amp;);
};
</code></pre>

<p>이제 <code>HomeForSale</code>을 다음과 같이 바꿔주자.</p>

<pre><code class="cpp">class HomeForSale: private Uncopyable {
    ...
};
</code></pre>

<p><code>HomeForSale</code> 객체의 복사를 시도할 때, 컴파일러는 복사 생성자 혹은 복사 대입 연산자를 생성하려고 할 것이다. 그러나 <strong>컴파일러가 자동 생성한 복사 생성자나 복사 대입 연산자는 기반 클래스의 복사 생성자나 복사 대입 연산자를 먼저 호출해야 하지만</strong>,  해당 함수들이 <code>private</code>으로 선언되어 있기 때문에 생성이 되지 않으며, 컴파일 에러가 발생한다.</p>

<p>여기서 기술적으로 미묘한 몇가지 사항을 짚고 넘어가자면, 우선 <code>Uncopyable</code>로부터의 상속은 <code>public</code> 상속일 필요가 없다(항목 32 및 39 참조). 그리고 <code>Uncopyable</code>의 소멸자는 가상 소멸자가 아니어도 된다(항목 7 참조). 또한 <code>Uncopyable</code> 클래스는 데이터 멤버가 전혀 없기 때문에 <strong>공백 기반클래스 최적화(EBO: Empty Base Optimization)</strong>(항목 39 참조) 기법을 쓸 여지가 생기는데, <code>Uncopyable</code>은 기반 클래스이기 때문에 이 기법을 사용하면 다중 상속(항목 40 참조)으로 갈 가능성이 있다. 그러나, 다중 상속시에는 EBO 기법이 돌아가지 못할 때가 종종 있으니 이런 미묘한 부분은 대강 무시하고 넘어가자. 또한 <em>부스트(boost)</em> 라이브러리에는 <code>Uncopyable</code>와 똑같은 구실을 하는 <code>noncopyable</code>이라는 클래스가 있는데, 이 클래스를 사용해도 된다.</p>

<blockquote><ul>
<li>컴파일러에서 자동으로 제공하는 기능을 허용치 않으려면, 대응되는 멤버 함수를 <code>private</code>으로 선언한 후에 구현은 하지 않은 채로 두자. <code>Uncopyable</code>과 비슷한 기반 클래스를 상속해서 사용하는 것도 한 방법이다.</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Effective C++] Item 5. C++가 은근슬쩍 만들어 호출해 버리는 함수들에 촉각을 세우자]]></title>
    <link href="http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-5/"/>
    <updated>2016-04-25T13:17:31+09:00</updated>
    <id>http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-5</id>
    <content type="html"><![CDATA[<h3>컴파일러가 자동으로 만들어내는 함수</h3>

<p>비어 있는 클래스일지라도 컴파일러가 저절로 선언해 주는 멤버 함수들이 있다. 바로 <strong>복사 생성자</strong>, <strong>복사 대입 연산자</strong>, 그리고 <strong>소멸자</strong>이다. 만약 생성자 조차도 선언되어 있지 않으면 <strong>기본 생성자</strong>까지 컴파일러가 만들어 낸다. 이들은 모두 기본형으로 <code>public</code>이며 <code>inline</code> 함수로 만들어 진다(항목 30 참조).</p>

<p>따라서 다음과 같은 클래스는</p>

<pre><code class="cpp">class Empty {
};
</code></pre>

<pre><code class="cpp">class Empty {
public:
    Empty() { ... }                            // 기본 생성자
    Empty(const Empty&amp; rhs) { ... }            // 복사 생성자
    ~Empty() { ... }                           // 소멸자
    Empty&amp; operator=(const Empty&amp; rhs) { ... } // 복사 대입 연산자
};
</code></pre>

<p>위의 코드와 크게 다르지 않다. 그렇다고 컴파일러가 무턱대고 만들어 내는 것은 아니고, 아래와 같이 사용될 때 필요에 의해 만들어낸다.</p>

<pre><code class="cpp">Empty e1; // 기본 생성자, 소멸자
Empty e2(e1); // 복사 생성자
e2 = e1; // 복사 대입 연산자
</code></pre>

<p>기본 생성자/소멸자가 생성될 때에는 기반 클래스 및 비정적 데이터 멤버의 생성자/소멸자가 자동으로 호출된다. 이 때, <strong>이 클래스가 상속한 기반 클래스의 소멸자가 가상 함수로 선언되어 있지 않으면, 비가상 소멸자로 만들어 진다(항목 7 참조)</strong>.</p>

<p>컴파일러가 만들어낸 복사 생성자와 복사 대입 연산자는 원본 객체의 비정적 데이터를 사본 객체로 복사한다.</p>

<pre><code class="cpp">template&lt;typename T&gt;
class NamedObject {
public:
    NamedObject(const char *name, const T&amp; value);
    NamedObject(const std::string&amp; name, const T&amp; value);
    ...
private:
    std::string nameValue;
    T objectValue;
};
</code></pre>

<p>이 템플릿 클래스 안에는 생성자가 선언되어 있으므로, 컴파일러는 기본 생성자를 만들어 내지 않는다. 반면에 복사 생성자나 복사 대입 연산자는 선언되어 있지 않기 때문에, 이 두 함수의 기본형이 컴파일러에 의해 만들어 진다(물론 필요에 의해서).</p>

<pre><code class="cpp">NamedObject&lt;int&gt; no1("Smallest Prime Number", 2);
NamedObject&lt;int&gt; no2(no1);
</code></pre>

<p>컴파일러는 <code>no1.nameValue</code>와 <code>no1.objectValue</code>를 사용하여 <code>no2.nameValue</code> 및 <code>no2.objectValue</code>를 각각 초기화 한다.</p>

<p><code>nameValue</code>의 타입은 <code>std::string</code>이고, <code>std::string</code>은 자체적으로 복사 생성자를 갖고 있기 때문에 <code>no2.nameValue</code>의 초기화는 <code>std::string</code>의 복사 생성자에 <code>no1.nameValue</code>를 인자로 호출하여 이루어 진다.</p>

<p><code>objectValue</code>의 타입은 템플릿 인스턴스화에 의해 <code>int</code> 형이 되는데, <code>int</code>는 기본 제공 타입이므로 <code>no2.objectValue</code>는 <code>no1.objectValue</code>의 값을 그대로 복사해 오는 것으로 끝난다.</p>

<p>따라서 다음과 같은 기본형의 복사 생성자가 만들어 질 것이다.</p>

<pre><code class="cpp">NamedObject(const NamedObject&amp; other)
    : nameValue(other.nameValue),
      objectValue(other.objectValue)
{
}
</code></pre>

<h3>복사 대입 연산자가 자동 생성되지 않는 경우</h3>

<p>컴파일러가 만들어 주는 복사 대입 연산자도 근본적으로는 복사 생성자와 원리가 똑같다. 그러나 복사 대입 연산자의 자동 생성이 되려면 최종 코드가 &lsquo;적법해야(legal)&rsquo; 하고, &lsquo;이치에 맞아야만(reasonable)&rsquo; 한다. 둘 중 하나라도 만족하지 못하면 컴파일러는 <code>operator=</code> 함수를 만들어내지 않는다.</p>

<pre><code class="cpp">template&lt;class T&gt;
class NamedObject {
public:
    // 이 생성자는 이제 상수 타입의 name을 취하지 않는다.
    // nameValue가 비상수 string의 참조자가 되었기 때문이다.
    // 또한, 참조할 string을 가져야 하기 때문에 char* 는 없애 버렸다.
    NamedObject(std::string&amp; name, const T&amp; value);
    ... // operator= 는 선언되지 않았다고 가정
private:
    std::string&amp; nameValue; // 참조자
    const T objectValue; // 상수
};
</code></pre>

<p>자 그럼 다음과 같은 코드에선 어떤 일이 일어날까?</p>

<pre><code class="cpp">std::string newDog("Persephone");
std::string oldDog("Satch");

NamedObject&lt;int&gt; p(newDog, 2);
NamedObject&lt;int&gt; s(oldDog, 36);

p = s; // p의 데이터 멤버에는 어떤 일이 일어날까?
</code></pre>

<p>C++에서 참조자와 상수는 중간에 변경이 불가능하므로 컴파일이 되지 않는다. 따라서 참조자나 상수 데이터 멤버를 갖고 있는 클래스의 경우, 대입 연산을 지원하기 위해서는 직접 복사 대입 연산자를 정의해 주어야 한다.</p>

<p>추가로 기반 클래스가 복사 대입 연산자를 <code>private</code>으로 선언한 경우, 파생 클래스는 암시적 복사 대입 연산자를 가질 수 없다. 파생 클래스에 대해 컴파일러가 만들어 주는 복사 대입 연산자는 기반 클래스의 복사 대입 연산자를 호출해야 하는데, <code>private</code>으로 되어 있으면 호출할 권한이 없기 때문이다.</p>

<blockquote><ul>
<li>컴파일러는 경우에 따라 클래스에 대해 기본 생성자, 복사 생성자, 복사 대입 연산자, 소멸자를 암시적으로 만들어 놓을 수 있다.</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Effective C++] Item 4. 객체를 사용하기 전에 반드시 그 객체를 초기화하자]]></title>
    <link href="http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-4/"/>
    <updated>2016-04-25T13:17:29+09:00</updated>
    <id>http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-4</id>
    <content type="html"><![CDATA[<h3>비멤버 객체 초기화</h3>

<p>객체의 값을 초기화 하는데 있어 C++는 복잡한 규칙을 따른다.
아래와 같은 경우,</p>

<pre><code class="cpp">int x;
</code></pre>

<p>어떤 상황에서는 <code>x</code>의 값은 0으로 확실히 초기화되지만, 또 다른 상황에서는 x의 값이 보장되지 않는다. 또한,</p>

<pre><code class="cpp">class Point {
    int x, y;
};
// ...
Point p;
</code></pre>

<p><code>p</code>의 데이터 멤버 역시 어떤 상황에서는 초기화가 보장되지만, 또 어떤 상황에서는 초기화가 보장되지 않는다. 대부분의 경우, 객체의 내부가 무작위 비트로 된 이상한 값을 갖게 된다.</p>

<p>C++의 객체 초기화는 나름대로의 규칙을 갖고 있지만, 이 규칙이 복잡하기 때문에 <strong>항상 초기화</strong>하는 습관을 들이는 것이 좋다.</p>

<p>비멤버 객체에 대해서는 초기화를 손수 해주어야 한다.</p>

<pre><code class="cpp">int x = 0;
const char* text = "A C-style string";
double d;
std::cin &gt;&gt; d; // 입력 스트림에서 읽음으로써 "초기화" 수행
</code></pre>

<h3>멤버 객체 초기화</h3>

<p>멤버 객체는 생성자의 초기화 리스트로 초기화한다. 이때, <strong>그 객체의 모든 멤버를 초기화</strong>하는 습관을 들이자. 단, <strong>대입과 초기화를 구분</strong>하는 것이 중요하다.</p>

<pre><code class="cpp">class PhoneNumber { ... };

class ABEntry   // Address Book Entry
{
public:
    ABEntry(const std::string&amp; name, const std::string&amp; address,
            const std::list&lt;PhoneNumber&gt;&amp; phones);

private:
    std::string theName;
    std::string theAddress;
    std::list&lt;PhoneNumber&gt; thePhones;
    int numTimesConsulted;
};

ABEntry::ABEntry(const std::string&amp; name, const std::string&amp; address,
                 const std::list&lt;PhoneNumber&gt;&amp; phones)
{
    theName = name;       // 이것은 초기화가 아니라 대입이다.
    theAddress = address;
    thePhone = phones;
    numTimesConsulted = 0;
}
</code></pre>

<p>C++ 규칙에 의하면 어떤 객체이든 그 객체의 데이터 멤버는 생성자의 본문이 실행되기 전에 초기화되어야 한다고 명기되어 있다.</p>

<p><code>theName</code>과 <code>theAddress</code>, <code>thePhone</code>은 생성자 본문이 실행되기 전에 기본 생성자가 호출됨으로써 초기화가 수행되었고, 생성자 본문에서는 그냥 대입만 되고 있다.</p>

<p>그렇다면, <code>numTimesConsulted</code>도 미리 초기화가 되었을까? 꼭 그렇지만은 않다. 기본 제공 타입의 경우, 생성자 본문이 실행되기 전 초기화되리란 보장이 없다.</p>

<p>더욱 효과적으로 초기화를 하려면 어떻게 할까? 바로 <strong>멤버 초기화 리스트</strong>를 사용하는 것이다.</p>

<pre><code class="cpp">ABEntry::ABEntry(const std::string&amp; name, const std::string&amp; address,
                 const std::list&lt;PhoneNumber&gt;&amp; phones)
: theName(name),       // 이제 이들은 모두 초기화되고 있다.
  theAddress(address),
  thePhone(phones)
  numTimesConsulted(0)
{ }                    // 생성자 본문엔 이제 아무 것도 필요 없다.
</code></pre>

<p>멤버 초기화 리스트를 이용한 방법은 대입을 이용한 방법보다 더 효율적일 가능성이 크다. 이전 버전은 기본 생성자로 미리 초기화를 해 놓은 후, 바로 대입을 하고 있기 때문에 먼저 호출된 기본 생성자에서 해놓은 초기화는 그냥 <strong>헛짓</strong>이 되고 만다.</p>

<p>따라서 기본 생성자 + 복사 대입 연산자보다 복사 생성자를 한번만 호출하는 쪽이 대부분의 데이터 타입의 경우, 더 효율적이기 때문이다.</p>

<h3>멤버를 기본 생성자로 초기화</h3>

<p>데이터 멤버를 기본 생성자로 초기화하고 싶을 땐 다음과 같이 한다.</p>

<pre><code class="cpp">ABEntry::ABEntry()
: theName(), // 기본 생성자 호출
  theAddress(),
  thePhone()
  numTimesConsulted(0)
{ }
</code></pre>

<p>위와 같이 기본 생성자를 호출하는 것이 약간 오버처럼 느껴질 수도 있다. 어떤 데이터 멤버가 멤버 초기화 리스트에 들어가지 않았고 그 데이터 멤버가 사용자 정의 타입이면, 컴파일러가 자동으로 기본 생성자를 호출하게 되기 때문이다. 그러나 기본 제공 타입은 기본값 같은 것이 없기 때문에(<em>C 언어의 특성상</em>) 초기화가 되지 않는다.</p>

<p>기본 제공 타입은 초기화와 대입에 들어가는 비용에 거의 차이가 없기 때문에 생성자 본문에 넣어도 되지 않을까 라는 생각을 가질 수 있다. 그러나 기본 제공 타입이 상수 혹은 참조자로 되어 있는 경우는 대입 자체가 불가능하기 때문에 무조건 멤버 초기화 리스트에 넣어 주어야 한다.</p>

<p>이렇듯 규칙이 너무 복잡하기 때문에 골치가 아파진다. 그냥 이것저것 따지지 말고, 멤버 초기화 리스트에서 모든 멤버를 초기화해 주는 쪽이 속이 편하다.</p>

<p>현장에서 쓰이는 많은 클래스가 여러 개의 생성자를 갖고 있다. 그리고 각 생성자마다 멤버 초기화 리스트가 붙어 있을 것이다. 이런 클래스에 데이터 멤버와 부모 클래스가 적지 않게 붙어 있다면, 각 생성자마다 멤버 초기화 리스트가 주렁주렁 매달려 있을 것이다. 같은 멤버들의 초기값이 중복되어 출현할 것이고, 프로그래머가 보기에도 코드가 지겨워질 것은 불을 보듯 뻔한 일이다.</p>

<p>이럴 때는 대입으로도 초기화가 가능한 데이터 멤버들을 별도의 함수로 빼내어(대게 <code>private</code> 함수) 초기화를 시키는 방법을 사용하면 되지만, 이런 가짜 초기화보다는 아무래도 멤버 초기화 리스트를 사용하는 쪽이 더 좋을 것이다.
(C++11 에서는 이런 문제를 해결할 수 있는 방법이 존재합니다. 자세한 내용은 <a href="http://langgeek.tistory.com/entry/C11-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%9C%84%EC%9E%84">[C++11] 생성자 위임</a> 글 참조)</p>

<h3>초기화 순서</h3>

<p>이처럼 변덕스러운 C++의 객체 초기화에도 변하지 않는 것이 딱 하나 있다. (1) <strong>기본 클래스는 파생 클래스보다 먼저 초기화</strong>되고(항목 12 참조), (2) 클래스 데이터 멤버는 그들이 <strong>선언된 순서대로 초기화</strong>된다는 사실이다.</p>

<p><code>ABEntry</code>로 예를 들면, 가장 먼저 <code>theName</code>이 초기화되고, 두번째로 <code>theAddress</code>, 세번째로 <code>thePhones</code>, 그리고 마지막으로 <code>numTimesConsulted</code>가 초기화된다.</p>

<p>어쩌다가 멤버 초기화 리스트에 이들이 넣어진 순서가 다르더라도, 초기화 순서는 선언된 순서를 따라간다. 멤버 초기화가 서로 얽혀 있다면 이 같은 문제는 찾기 어려운 버그를 만들어 내므로, <strong>멤버 초기화 리스트에 넣는 멤버들의 순서를 클래스에 선언한 순서와 동일하게</strong> 맞춰주자.</p>

<h3>비지역 정적 객체(non-local static object)의 초기화 순서</h3>

<p><strong>서로 다른 번역 단위에서 정의된 비지역 정적 객체들 사이의 상대적인 초기화 순서는 정해져 있지 않다.</strong></p>

<ul>
<li><strong>정적 객체</strong>: 자신이 생성된 시점부터 프로그램이 끝날 때까지 살아 있는 객체로 아래 다섯가지가 있다.</li>
<li>전역 객체</li>
<li>네임스페이스 유효범위에서 정의된 객체</li>
<li>클래스 안에서 <code>static</code>으로 선언된 객체</li>
<li>함수 안에서 <code>static</code>으로 선언된 객체</li>
<li>파일 유효범위에서 <code>static</code>으로 선언된 객체</li>
</ul>


<blockquote><p>스택 객체(지역 객체) 및 힙 객체(<code>new</code> 혹은 <code>malloc</code>으로 할당된 객체, 다른 말로 동적 객체)는 정적 객체가 아니다.</p></blockquote>

<p>위 다섯가지 중, 함수 안에 있는 정적 객체는 지역 정적 객체, 나머지는 비지역 정적 객체라고 한다.</p>

<p>이 다섯 종류의 정적 객체는 프로그램이 끝날 때(<code>main()</code> 함수의 실행이 끝날 때) 자동으로 소멸된다.</p>

<ul>
<li><strong>번역 단위(translation unit)</strong>: 컴파일을 통해 하나의 목적 파일(object file)을 만드는 바탕이 되는 소스 코드. 기본적으로는 소스 파일 하나와 그 파일이 <code>#include</code>하는 파일들까지 합쳐서 하나의 번역 단위가 된다.</li>
</ul>


<p>객체의 초기화 순서 문제는 다음과 같은 경우에 발생한다.</p>

<ol>
<li>별도로 컴파일된 소스 파일이 두 개 이상 있으며</li>
<li>각 소스 파일에 비지역 정적 객체가 한 개 이상 들어있고</li>
<li>한 쪽 번역 단위에 있는 객체의 초기화가 진행되면서, 다른 쪽에 있는 비지역 정적 객체가 사용될 때</li>
</ol>


<p>위의 경우에 비지역 정적 객체의 초기화 순서가 정해져 있지 않아 문제가 발생한다.</p>

<p>예를 보자. 아래와 같은 파일 시스템을 나타내는 클래스가 있고, 이 클래스로 만들어지는 객체는 단 하나만 존재해야 하기에 비지역 정적 객체로 만들었다.</p>

<pre><code class="cpp">class FileSystem {
public:
    ...
    std::size_t numDisks() const;
    ...
};
extern FileSystem tfs; // 사용자가 쓰게될 객체
</code></pre>

<p>이제 사용자 측에서 <code>tfs</code>를 사용하여 디렉토리를 나타내는 클래스를 만들기로 하였다.</p>

<pre><code class="cpp">class Directory {
    public:
        Directory(params);
        ..
};

Directory::Directory(params) {
    ...
    std::size_t disks = tfs.numDisks();
    ...
}
</code></pre>

<p>그리고 이 클래스의 객체를 생성해서 사용하려고 하면</p>

<pre><code class="cpp">Directory tempDir(params)
</code></pre>

<p>비지역 정적 객체의 초기화 순서가 정해져 있지 않기 때문에 문제가 발생할 수 있다.
<code>tempDir</code>을 생성하기 전에 <code>tfs</code>가 생성이 되어 있어야 하는데, 개별 번역 단위에 있기 때문에 <code>tfs</code>가 먼저 초기화되리란 보장이 없기 때문이다.</p>

<p>사실 비지역 정적 객체들의 초기화에 대해 적절한 순서를 결정하기란 매우 어려운 일이다.</p>

<p>다행히 이런 경우는 설계에 약간 변화만 주면 해결이 가능하다.</p>

<p>비지역 정적 객체를 하나씩 맡는 함수를 준비하고 이 안에 각 객체를 넣으면 된다. 함수 속에서도 이들을 정적 객체로 선언하고, 그 함수에서는 이들에 대한 참조자를 반환하게 만든다. 사용자 쪽에서는 비지역 정적 객체를 직접 참조하는 방식을 버리고 함수 호출로 대신한다. 즉 정리하자면, <strong>비지역 정적 객체를 지역 정적 객체로 바꾸는 것</strong>이다. (이는 싱글턴 패턴의 전형적인 방식이다.)</p>

<p>C++에서는(정확하게는 C) 지역 정적 객체는 함수 호출 중에 그 객체의 정의에 최초로 닿았을 때 초기화 되도록 만들어져 있다. 위의 방법은 이 사실을 이용한 것이다.</p>

<p>또한 비지역 정적 객체 대신에 준비한 지역 객체 참조자 반환 함수를 호출할 일이 없다면 해당 객체의 생성/소멸 비용도 생기지 않게 막아야 한다.</p>

<p>그리하여 이전 코드에 다음과 같은 변화를 주면</p>

<pre><code class="cpp">class FileSystem {...} // 이전과 같은 클래스

FileSystem&amp; tfs() {
    static FileSystem fs;
    return fs;
}
</code></pre>

<pre><code class="cpp">class Directory {...} // 이전과 같은 클래스

Directory::Directory(params) {
    ...
    std::size_t disks = tfs().numDisks();
    ...
}

Directory&amp; tempDir()
{
    static Directory td;
    return td;
}
</code></pre>

<p><code>tempDir</code> 함수를 호출하기 전에는 <code>Directory</code> 객체도 생기지 않을 것이며 <code>FileSystem</code> 객체도 생기지 않을 것이다.</p>

<p>단, 다중 스레드 시스템에서는 위의 방법이 문제가 될 수도 있다. 비상수 정적 객체(지역 객체이든 비지역 객체이든)는 다중 스레드 시스템에서는 온갖 문제점을 야기할 수 있다. 한가지 방법은 프로그램이 다중 스레드로 돌입하기 전, 참조자 반환 함수를 전부 손으로 호출해 주어서 초기화에 관계된 경쟁 상태(race condition)를 피할 수 있다. 물론 객체들의 초기화 순서를 제대로 맞춰두기만 한다면 말이다.</p>

<blockquote><ul>
<li>기본 제공 타입의 객체는 직접 손으로 초기화한다. 경우에 따라 저절로 되기도 하고 안되기도 하기 때문이다.</li>
<li>생성자에서는 데이터 멤버에 대한 대입문을 본문 내부에 넣는 방법으로 멤버를 초기화하지 말고 멤버 초기화 리스트를 즐겨 사용하자. 그리고 초기화 리스트에 데이터 멤버를 나열할 때는 클래스에 각 데이터 멤버가 선언된 순서와 똑같이 나열하자.</li>
<li>여러 번역 단위에 있는 비지역 정적 객체들의 초기화 순서 문제는 피해서 설계해야 한다. 비지역 정적 객체를 지역 정적 객체로 바꾸면 된다.</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Effective C++] Item 3. 낌새만 보이면 const를 들이대 보자!]]></title>
    <link href="http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-3/"/>
    <updated>2016-04-25T13:17:27+09:00</updated>
    <id>http://chozekun.github.io/blog/2016/04/25/effective-c-plus-plus-item-3</id>
    <content type="html"><![CDATA[<h3>포인터와 <code>const</code></h3>

<p><code>const</code> 키워드는 들어갈 수 있겠다 싶은 곳이면 어디든 붙일 수 있다.</p>

<p>포인터 타입에 대해서는 포인터 자체를 상수로, 혹은 포인터가 가리키는 대상을 상수로, 혹은 둘 다 지정할 수 있고, 아무것도 지정하지 않을 수도 있다.</p>

<pre><code class="cpp">char greeting[] = "Hello";
char* p = greeting; // 비상수 포인터, 비상수 데이터
const char* p = greeting; // 비상수 포인터, 상수 데이터
char* const p = greeting; // 상수 포인터, 비상수 데이터
const char* const p = greeting; // 상수 포인터, 상수 데이터
</code></pre>

<p><code>const</code> 키워드가 <code>*</code>의 왼쪽에 있으면 포인터가 가리키는 대상이 상수,
<code>const</code>가 <code>*</code>의 오른쪽에 있으면 포인터 자체가 상수이다.</p>

<p><code>const</code>가 <code>*</code>의 양쪽에 다 있으면 포인터가 가리키는 대상 및 포인터가 전부 상수이다.</p>

<p> 포인터가 가리키는 대상을 상수로 만들 때 const 를 사용하는 스타일이 다를 수 있는데,</p>

<pre><code class="cpp">void f1(const Widget *pw);
void f2(Widget const *pw);
</code></pre>

<p>위의 두 함수의 매개 변수 타입은 동일하다.</p>

<h3>STL과 <code>const</code></h3>

<p>STL 반복자(iterator)는 기본적인 동작 원리가 T* 포인터와 흡사합니다.</p>

<pre><code class="cpp">std::vector&lt;int&gt; vec;
// ...
const std::vector&lt;int&gt;::iterator iter = vec.begin(); // iter는 T* const 처럼 동작합니다.
*iter = 10; // OK, iter가 가리키는 대상을 변경한다.
++iter; // 에러! iter는 상수

std::vector&lt;int&gt;::const_iterator cIter = vec.begin(); // cIter는 const T* 처럼 동작합니다.
*cIter = 10; // 에러! cIter가 가리키는 대상이 상수
++cIter; // OK, cIter를 변경한다.
</code></pre>

<p><code>const</code>의 가장 강력한 용도는 함수 선언에 쓸 경우이다.</p>

<p><code>const</code>는 함수 반환 값, 각각의 매개 변수, 멤버 함수 앞에 붙을 수 있고, 함수 전체에 대해 <code>const</code>의 성질을 붙일 수 있다.</p>

<h3>함수 반환 값을 상수로 만들기</h3>

<pre><code class="cpp">class Rational { ... };
const Rational operator*(const Rational&amp; lhs, const Rational&amp; rhs);
</code></pre>

<p>함수의 반환 값이 상수일 때, 다음과 같은 어처구니 없는 실수를 막아준다.</p>

<pre><code class="cpp">Rational a, b, c;
// ...
(a * b) = c; // 에러!
</code></pre>

<p>위와 같은 경우는 바로 알아챌 수 있겠지만, 다음과 같은 경우는 비교적 많이 일어난다.</p>

<pre><code class="cpp">if (a * b = c) ... // 타이핑 실수, 원래 비교하려고 했던건데...
</code></pre>

<p>위의 코드는 <code>a</code>와 <code>b</code>가 기본 제공 타입이었다면 문법 위반에 걸리는 코드이지만, 사용자 정의 타입이기 때문에 허용된다.</p>

<h3>상수 멤버 함수</h3>

<p>멤버 함수에 붙는 <code>const</code> 키워드는 &ldquo;해당 멤버 함수가 상수 객체에 대해 호출될 함수이다&rdquo; 라는 사실을 알려준다.
이런 함수가 중요한 이유는 두 가지이다.</p>

<ol>
<li><p><strong>클래스의 인터페이스를 이해하기가 쉬워짐</strong>: 해당 클래스 객체의 상태를 변화시킬 수 없는 함수는 무엇이며, 변화시킬 수 있는 함수는 무엇인지 클래스 선언만 보고 바로 알 수 있다.</p></li>
<li><p><strong>해당 클래스의 상수 객체를 사용할 수 있게 해줌</strong>: C++ 프로그램의 실행 성능을 높이는 핵심 기법중의 하나인 &ldquo;상수 객체에 대한 참조자"를 쓰려면, 상수 멤버 함수가 준비되어 있어야 한다.</p></li>
</ol>


<p><code>const</code> 키워드가 있고 없고의 차이만 있는 멤버 함수들은 오버로딩이 가능하다.</p>

<pre><code class="cpp">class TextBlock {
public:
    // ...

    // 상수 객체에 대한 operator[]                   _____
    const char&amp; operator[](std::size_t position) const
    { return text[position]; }

    // 비상수 객체에 대한 operator[]
    char&amp; operator[](std::size_t position)
    { return text[position]; }

private:
    std::string text;
};
</code></pre>

<p>위 처럼 선언된 <code>TextBlock</code>의 <code>operator[]</code>는 다음과 같이 쓸 수 있다.</p>

<pre><code class="cpp">TextBlock tb("Hello");
std::cout &lt;&lt; tb[0]; // 비상수 멤버 호출

const TextBlock ctb("World");
std::cout &lt;&lt; ctb[0]; // 상수 멤버 호출
</code></pre>

<p>위 예제는 이해를 돕기위한 용도가 크고, 실제 프로그램에서 상수 객체가 자주 생기는 경우는 <strong>상수 객체에 대한 포인터 혹은 참조자가 함수의 인자로 전달될 때</strong>이다.</p>

<pre><code class="cpp">void print(const TextBlock&amp; ctb)
{
    if (ctb.empty()) return;
    std::cout &lt;&lt; ctb[0];
    // ...
}
</code></pre>

<p>또한 상수 객체와 비상수 객체의 쓰임새가 아래처럼 달라질 수 있다.</p>

<pre><code class="cpp">std::cout &lt;&lt; tb[0]; // OK
tb[0] = 'x'; // OK
std::cout &lt;&lt; ctb[0]; // OK
ctb[0] = 'x'; // 에러!
</code></pre>

<p>상수 객체의 반환 타입이 <code>const char&amp;</code>이기 때문에 넷째줄에서 에러가 발생했다.</p>

<p>비상수 버전의 <code>operator[]</code>는 참조자를 반환해야 한다. 만약 그냥 <code>char</code>를 반환한다면, 다음 문장은 컴파일되지 않는다.</p>

<pre><code class="cpp">tb[0] = 'x';
</code></pre>

<p>기본 제공 타입을 반환하는 함수의 반환 값을 수정하는 일은 불가능하다. 만약 된다고 해도, <strong>&lsquo;값에 의한 반환&rsquo;</strong>을 수행하는 C++의 특성상 수정되는 값은 <code>tb.text[0]</code>의 사본이지 <code>tb.text[0]</code>의 값이 아니다.</p>

<h3>비트수준 상수성과 논리적 상수성</h3>

<ul>
<li>비트수준 상수성(물리적 상수성): 멤버 함수가 <code>const</code>이려면 그 객체의 어떤 데이터 멤버(정적 멤버는 제외)도 바꾸지 않아야 함.</li>
</ul>


<p>C++에서 정의하고 있는 상수성도 비트수준 상수성이고, 컴파일러 차원에서 비트수준 상수성을 지키는 것은 매우 쉽지만, 포인터가 가리키는 대상을 변경하는 경우, 컴파일러가 잡아내지 못한다.</p>

<pre><code class="cpp">class CTextBlock {
public:
    // ...

    // 부적절한(그러나 비트수준 상수성을 지키는 것처럼 보여져서 허용되는) 선언
    char&amp; operator[](std::size_t position) const
    { return pText[position]; }
private:
    char *pText;
</code></pre>

<p><code>operator[]</code> 내부 코드만 보면 <code>pText</code>를 바꿀 수 없다는 것은 확실하다. 그러나 다음과 같은 코드에서는</p>

<pre><code class="cpp">const CTextBlock cctb("Hello");
char *pc = &amp;cctb[0];
*pc = 'J'; // OK, cctb는 이제 "Jello"라는 값을 가짐
</code></pre>

<p>상수 객체에 대고 상수 멤버 함수 밖에 호출한 적이 없는데 내부의 값이 변해 버렸다.</p>

<p>논리적 상수성은 이런 황당한 상황을 보완하는 개념으로 나오게 되었다.</p>

<ul>
<li><strong>논리적 상수성</strong>: 상수 멤버 함수라고 해서 객체를 조금도 바꿀 수 없는 것이 아니라, 일부는 바꿀 수 있되, 사용자측이 알아채지 못하게만 하면 상수 멤버 자격이 있다.</li>
</ul>


<p>예를 들어, 클래스 내부의 캐시 데이터를 업데이트하는 용도가 이런 경우에 해당된다.</p>

<pre><code class="cpp">class CTextBlock {
public:
    // ...
    std::size_t length() const;
private:
    char *pText;
    std::size_t textLength; // 바로 직전에 계산한(캐시된) 텍스트 길이
    bool lengthIsValid; // 이 길이(캐시)가 현재 유효한가?
};

std::size_t CTextBlock::length() const
{
    if (!lengthIsValid) {
        textLength = std::strlen(pText); // 에러!
        lengthIsValid = true; // 에러!
    }
    return textLength;
}
</code></pre>

<p>위 코드는 효율적인 측면을 고려하여 <code>textLength</code>의 값을 캐시해 놓는다.
그리고 사용자는 <code>length()</code>가 어떤식으로 구현되어 있던 간에 <code>pText</code>의 값이 변하지 않을 것을 알고 함수를 호출할 것이다.
이때 이 함수는 논리적 상수성을 지키고 있는 것이다.
그러나 컴파일러가 비트수준 상수성을 강제하고 있기 때문에 컴파일 에러가 발생한다.
이를 해결할 방법은 mutable 키워드를 이용하는 것이다.
이 키워드가 붙은 데이터 멤버는 상수 멤버 함수 안에서도 수정이 가능해진다.</p>

<pre><code class="cpp">class CTextBlock {
public:
    // ...
    std::size_t length() const;
private:
    char *pText;
    mutable std::size_t textLength; // 바로 직전에 계산한(캐시된) 텍스트 길이
    mutable bool lengthIsValid; // 이 길이(캐시)가 현재 유효한가?
};

std::size_t CTextBlock::length() const
{
    if (!lengthIsValid) {
        textLength = std::strlen(pText); // OK
        lengthIsValid = true; // OK
    }
    return textLength;
}
</code></pre>

<h4>상수 멤버 및 비상수 멤버 함수에서 코드 중복 현상을 피하는 방법</h4>

<p><code>TextBlock::operator[]</code>가 기능이 확장되어(경계 검사, 접근 데이터 로깅, 무결성 검증 등) 코드가 비대해지면, 아무리 개별 함수로 빼낸다 해도 코드 중복이 생길 수 밖에 없다.</p>

<pre><code class="cpp">class TextBlock {
public:
    // ...

    const char&amp; operator[](std::size_t position) const
    { 
        // 경계 검사
        // 접근 데이터 로깅
        // 무결성 검증
        return text[position];
    }

    char&amp; operator[](std::size_t position)
    {
        // 경계 검사
        // 접근 데이터 로깅
        // 무결성 검증
        return text[position];
    }

private:
    std::string text;
};
</code></pre>

<p>코드 중복은 절대악이다. 컴파일 시간, 유지보수 시간, 바이너리 크기 부풀림 등&hellip;
캐스팅을 써서 위와 같은 코드 중복을 피할 수 있다.
캐스팅은 기본적으로 피해야할 기법이지만, 코드 중복이 더 해악이므로 캐스팅을 사용한다.</p>

<pre><code class="cpp">class TextBlock {
public:
    // ...

    const char&amp; operator[](std::size_t position) const
    { 
        // 경계 검사
        // 접근 데이터 로깅
        // 무결성 검증
        return text[position];
    }

    char&amp; operator[](std::size_t position)
    {
        return
            const_cast&lt;char&amp;&gt;(
                static_cast&lt;const TextBlock&amp;&gt;
                    (*this)[position]
            );
    }

private:
    std::string text;
};
</code></pre>

<p>첫번째 캐스팅인 <code>static_cast</code>는 무한 재귀 호출을 피하기 위해, 즉 상수 버전의 <code>operator[]</code>를 호출하기 위해 사용되었고, 두번째 캐스팅인 <code>const_cast</code>는 결과에서 <code>const</code>를 떼어내기 위해 사용되었다.</p>

<p>물론 C 스타일의 캐스팅을 사용하면 괄호 만으로도 끝나겠지만, <strong>C 스타일의 캐스팅 보다는 C++ 스타일의 캐스팅을 사용해야 한다</strong>(항목 27 참조).</p>

<p>비상수 멤버 함수에서 상수 멤버 함수를 호출하는 이유는 반대로 생각하면 간단해 진다.</p>

<p>만약 <strong>상수 멤버 함수 쪽에서 비상수 멤버 함수 쪽을 호출했다면, 상수 멤버 함수로써는 비트 수준 상수성이 간단하게 깨지게 되는 것</strong>이기 때문이다.</p>

<blockquote><ul>
<li><code>const</code>를 붙여 선언하면 컴파일러가 사용상의 에러를 잡아내는 데 도움을 준다.</li>
<li>컴파일러는 비트수준 상수성을 지켜야 하지만, 우리는 논리적인 상수성을 사용하여 프로그래밍해야 한다.</li>
<li>상수 멤버 함수 및 비상수 멤버 함수가 서로 동일한 기능으로 구현되어 있을 경우, 비상수 버전이 상수 버전을 호출하도록 만들자.</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
</feed>
